import { __extends, __read, __spread } from 'tslib';
import { FormArray as NgFormArray } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import {
  controlDisabled$,
  controlDisabledWhile,
  controlEnabled$,
  controlEnabledWhile,
  controlErrorChanges$,
  controlStatusChanges$,
  controlValueChanges$,
  disableControl,
  enableControl,
  hasErrorAndDirty,
  hasErrorAndTouched,
  markAllDirty,
  mergeControlValidators
} from './control-actions';
import { coerceArray } from './utils';
var FormArray = /** @class */ (function(_super) {
  __extends(FormArray, _super);
  function FormArray(controls, validatorOrOpts, asyncValidator) {
    var _this = _super.call(this, controls, validatorOrOpts, asyncValidator) || this;
    _this.controls = controls;
    _this.touchChanges = new Subject();
    _this.dirtyChanges = new Subject();
    _this.touch$ = _this.touchChanges.asObservable().pipe(distinctUntilChanged());
    _this.dirty$ = _this.dirtyChanges.asObservable().pipe(distinctUntilChanged());
    _this.value$ = controlValueChanges$(_this);
    _this.disabled$ = controlDisabled$(_this);
    _this.enabled$ = controlEnabled$(_this);
    _this.status$ = controlStatusChanges$(_this);
    _this.errors$ = controlErrorChanges$(_this);
    return _this;
  }
  FormArray.prototype.select = function(mapFn) {
    return this.value$.pipe(map(mapFn), distinctUntilChanged());
  };
  FormArray.prototype.getRawValue = function() {
    return _super.prototype.getRawValue.call(this);
  };
  FormArray.prototype.at = function(index) {
    return _super.prototype.at.call(this, index);
  };
  FormArray.prototype.setValue = function(valueOrObservable, options) {
    var _this = this;
    if (isObservable(valueOrObservable)) {
      return valueOrObservable.subscribe(function(value) {
        return _super.prototype.setValue.call(_this, value, options);
      });
    }
    _super.prototype.setValue.call(this, valueOrObservable, options);
  };
  FormArray.prototype.patchValue = function(valueOrObservable, options) {
    var _this = this;
    if (isObservable(valueOrObservable)) {
      return valueOrObservable.subscribe(function(value) {
        return _super.prototype.patchValue.call(_this, value, options);
      });
    }
    _super.prototype.patchValue.call(this, valueOrObservable, options);
  };
  FormArray.prototype.push = function(control) {
    return _super.prototype.push.call(this, control);
  };
  FormArray.prototype.insert = function(index, control) {
    return _super.prototype.insert.call(this, index, control);
  };
  FormArray.prototype.setControl = function(index, control) {
    return _super.prototype.setControl.call(this, index, control);
  };
  FormArray.prototype.disabledWhile = function(observable, options) {
    return controlDisabledWhile(this, observable, options);
  };
  FormArray.prototype.enabledWhile = function(observable, options) {
    return controlEnabledWhile(this, observable, options);
  };
  FormArray.prototype.mergeValidators = function(validators) {
    mergeControlValidators(this, validators);
  };
  FormArray.prototype.mergeAsyncValidators = function(validators) {
    this.setAsyncValidators(__spread([this.asyncValidator], coerceArray(validators)));
    this.updateValueAndValidity();
  };
  FormArray.prototype.markAsTouched = function(opts) {
    _super.prototype.markAsTouched.call(this, opts);
    this.touchChanges.next(true);
  };
  FormArray.prototype.markAsUntouched = function(opts) {
    _super.prototype.markAsUntouched.call(this, opts);
    this.touchChanges.next(false);
  };
  FormArray.prototype.markAsPristine = function(opts) {
    _super.prototype.markAsPristine.call(this, opts);
    this.dirtyChanges.next(false);
  };
  FormArray.prototype.markAsDirty = function(opts) {
    _super.prototype.markAsDirty.call(this, opts);
    this.dirtyChanges.next(true);
  };
  FormArray.prototype.markAllAsDirty = function() {
    markAllDirty(this);
  };
  FormArray.prototype.reset = function(value, options) {
    _super.prototype.reset.call(this, value, options);
  };
  FormArray.prototype.setValidators = function(newValidator) {
    _super.prototype.setValidators.call(this, newValidator);
    _super.prototype.updateValueAndValidity.call(this);
  };
  FormArray.prototype.setAsyncValidators = function(newValidator) {
    _super.prototype.setAsyncValidators.call(this, newValidator);
    _super.prototype.updateValueAndValidity.call(this);
  };
  FormArray.prototype.validateOn = function(observableValidation) {
    var _this = this;
    return observableValidation.subscribe(function(maybeError) {
      _this.setErrors(maybeError);
    });
  };
  FormArray.prototype.hasError = function(errorCode, path) {
    return _super.prototype.hasError.call(this, errorCode, path);
  };
  FormArray.prototype.setErrors = function(errors, opts) {
    if (opts === void 0) {
      opts = {};
    }
    return _super.prototype.setErrors.call(this, errors, opts);
  };
  FormArray.prototype.getError = function(errorCode, path) {
    return _super.prototype.getError.call(this, errorCode, path);
  };
  FormArray.prototype.hasErrorAndTouched = function(errorCode, path) {
    return hasErrorAndTouched(this, errorCode, path);
  };
  FormArray.prototype.hasErrorAndDirty = function(errorCode, path) {
    return hasErrorAndDirty(this, errorCode, path);
  };
  FormArray.prototype.setEnable = function(enable, opts) {
    if (enable === void 0) {
      enable = true;
    }
    enableControl(this, enable, opts);
  };
  FormArray.prototype.setDisable = function(disable, opts) {
    if (disable === void 0) {
      disable = true;
    }
    disableControl(this, disable, opts);
  };
  return FormArray;
})(NgFormArray);
export { FormArray };
//# sourceMappingURL=data:application/json;base64,
