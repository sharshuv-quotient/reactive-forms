import { __extends, __read, __spread } from 'tslib';
import { FormGroup as NgFormGroup } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import {
  controlDisabled$,
  controlDisabledWhile,
  controlEnabled$,
  controlEnabledWhile,
  controlErrorChanges$,
  controlStatusChanges$,
  controlValueChanges$,
  disableControl,
  enableControl,
  hasErrorAndDirty,
  hasErrorAndTouched,
  markAllDirty,
  mergeControlValidators,
  selectControlValue$,
  validateControlOn
} from './control-actions';
import { coerceArray } from './utils';
var FormGroup = /** @class */ (function(_super) {
  __extends(FormGroup, _super);
  function FormGroup(controls, validatorOrOpts, asyncValidator) {
    var _this = _super.call(this, controls, validatorOrOpts, asyncValidator) || this;
    _this.controls = controls;
    _this.touchChanges = new Subject();
    _this.dirtyChanges = new Subject();
    _this.touch$ = _this.touchChanges.asObservable().pipe(distinctUntilChanged());
    _this.dirty$ = _this.dirtyChanges.asObservable().pipe(distinctUntilChanged());
    _this.value$ = controlValueChanges$(_this);
    _this.disabled$ = controlDisabled$(_this);
    _this.enabled$ = controlEnabled$(_this);
    _this.status$ = controlStatusChanges$(_this);
    _this.errors$ = controlErrorChanges$(_this);
    return _this;
  }
  FormGroup.prototype.select = function(mapFn) {
    return selectControlValue$(this, mapFn);
  };
  FormGroup.prototype.getRawValue = function() {
    return _super.prototype.getRawValue.call(this);
  };
  FormGroup.prototype.get = function(path) {
    return _super.prototype.get.call(this, path);
  };
  FormGroup.prototype.getControl = function() {
    var names = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      names[_i] = arguments[_i];
    }
    return this.get(names);
  };
  FormGroup.prototype.addControl = function(name, control) {
    _super.prototype.addControl.call(this, name, control);
  };
  FormGroup.prototype.removeControl = function(name) {
    _super.prototype.removeControl.call(this, name);
  };
  FormGroup.prototype.contains = function(controlName) {
    return _super.prototype.contains.call(this, controlName);
  };
  FormGroup.prototype.setControl = function(name, control) {
    _super.prototype.setControl.call(this, name, control);
  };
  FormGroup.prototype.setValue = function(valueOrObservable, options) {
    var _this = this;
    if (isObservable(valueOrObservable)) {
      return valueOrObservable.subscribe(function(value) {
        return _super.prototype.setValue.call(_this, value, options);
      });
    }
    _super.prototype.setValue.call(this, valueOrObservable, options);
  };
  FormGroup.prototype.patchValue = function(valueOrObservable, options) {
    var _this = this;
    if (isObservable(valueOrObservable)) {
      return valueOrObservable.subscribe(function(value) {
        return _super.prototype.patchValue.call(_this, value, options);
      });
    }
    _super.prototype.patchValue.call(this, valueOrObservable, options);
  };
  FormGroup.prototype.disabledWhile = function(observable, options) {
    return controlDisabledWhile(this, observable, options);
  };
  FormGroup.prototype.enabledWhile = function(observable, options) {
    return controlEnabledWhile(this, observable, options);
  };
  FormGroup.prototype.mergeValidators = function(validators) {
    mergeControlValidators(this, validators);
  };
  FormGroup.prototype.mergeAsyncValidators = function(validators) {
    this.setAsyncValidators(__spread([this.asyncValidator], coerceArray(validators)));
    this.updateValueAndValidity();
  };
  FormGroup.prototype.markAsTouched = function(opts) {
    _super.prototype.markAsTouched.call(this, opts);
    this.touchChanges.next(true);
  };
  FormGroup.prototype.markAsUntouched = function(opts) {
    _super.prototype.markAsUntouched.call(this, opts);
    this.touchChanges.next(false);
  };
  FormGroup.prototype.markAsPristine = function(opts) {
    _super.prototype.markAsPristine.call(this, opts);
    this.dirtyChanges.next(false);
  };
  FormGroup.prototype.markAsDirty = function(opts) {
    _super.prototype.markAsDirty.call(this, opts);
    this.dirtyChanges.next(true);
  };
  FormGroup.prototype.markAllAsDirty = function() {
    markAllDirty(this);
  };
  FormGroup.prototype.reset = function(formState, options) {
    _super.prototype.reset.call(this, formState, options);
  };
  FormGroup.prototype.setValidators = function(newValidator) {
    _super.prototype.setValidators.call(this, newValidator);
    _super.prototype.updateValueAndValidity.call(this);
  };
  FormGroup.prototype.setAsyncValidators = function(newValidator) {
    _super.prototype.setAsyncValidators.call(this, newValidator);
    _super.prototype.updateValueAndValidity.call(this);
  };
  FormGroup.prototype.validateOn = function(observableValidation) {
    return validateControlOn(this, observableValidation);
  };
  FormGroup.prototype.hasError = function(errorCode, path) {
    return _super.prototype.hasError.call(this, errorCode, path);
  };
  FormGroup.prototype.setErrors = function(errors, opts) {
    if (opts === void 0) {
      opts = {};
    }
    return _super.prototype.setErrors.call(this, errors, opts);
  };
  FormGroup.prototype.getError = function(errorCode, path) {
    return _super.prototype.getError.call(this, errorCode, path);
  };
  FormGroup.prototype.hasErrorAndTouched = function(error) {
    var path = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      path[_i - 1] = arguments[_i];
    }
    return hasErrorAndTouched.apply(void 0, __spread([this, error], path));
  };
  FormGroup.prototype.hasErrorAndDirty = function(error) {
    var path = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      path[_i - 1] = arguments[_i];
    }
    return hasErrorAndDirty.apply(void 0, __spread([this, error], path));
  };
  FormGroup.prototype.setEnable = function(enable, opts) {
    if (enable === void 0) {
      enable = true;
    }
    enableControl(this, enable, opts);
  };
  FormGroup.prototype.setDisable = function(disable, opts) {
    if (disable === void 0) {
      disable = true;
    }
    disableControl(this, disable, opts);
  };
  return FormGroup;
})(NgFormGroup);
export { FormGroup };
//# sourceMappingURL=data:application/json;base64,
