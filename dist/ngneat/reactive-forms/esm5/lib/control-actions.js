import { __read, __spread } from 'tslib';
import { defer, merge, of } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { coerceArray, isNil } from './utils';
function getControlValue(control) {
  if (control.getRawValue) {
    return control.getRawValue();
  }
  return control.value;
}
function compareErrors(a, b) {
  if (isNil(a) || isNil(b)) {
    return a === b;
  }
  return JSON.stringify(a) === JSON.stringify(b);
}
export function controlValueChanges$(control) {
  return merge(
    defer(function() {
      return of(getControlValue(control));
    }),
    control.valueChanges.pipe(
      map(function() {
        return getControlValue(control);
      })
    )
  );
}
export function controlDisabled$(control) {
  return merge(
    defer(function() {
      return of(control.disabled);
    }),
    control.statusChanges.pipe(
      map(function() {
        return control.disabled;
      }),
      distinctUntilChanged()
    )
  );
}
export function controlEnabled$(control) {
  return merge(
    defer(function() {
      return of(control.enabled);
    }),
    control.statusChanges.pipe(
      map(function() {
        return control.enabled;
      }),
      distinctUntilChanged()
    )
  );
}
export function controlStatusChanges$(control) {
  return merge(
    defer(function() {
      return of(control.status);
    }),
    control.statusChanges.pipe(
      map(function() {
        return control.status;
      }),
      distinctUntilChanged()
    )
  );
}
export function controlErrorChanges$(control) {
  return merge(
    defer(function() {
      return of(control.errors);
    }),
    control.valueChanges.pipe(
      map(function() {
        return control.errors;
      }),
      distinctUntilChanged(function(a, b) {
        return compareErrors(a, b);
      })
    )
  );
}
export function enableControl(control, enabled, opts) {
  if (enabled) {
    control.enable(opts);
  } else {
    control.disable(opts);
  }
}
export function disableControl(control, disabled, opts) {
  enableControl(control, !disabled, opts);
}
export function controlDisabledWhile(control, observable, opts) {
  return observable.subscribe(function(isDisabled) {
    return disableControl(control, isDisabled, opts);
  });
}
export function controlEnabledWhile(control, observable, opts) {
  return observable.subscribe(function(isEnabled) {
    return enableControl(control, isEnabled, opts);
  });
}
export function mergeControlValidators(control, validators) {
  control.setValidators(__spread([control.validator], coerceArray(validators)));
  control.updateValueAndValidity();
}
export function validateControlOn(control, validation) {
  return validation.subscribe(function(maybeError) {
    control.setErrors(maybeError);
  });
}
export function hasErrorAndTouched(control, error, path) {
  var hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
  return hasError && control.touched;
}
export function hasErrorAndDirty(control, error, path) {
  var hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
  return hasError && control.dirty;
}
export function markAllDirty(control) {
  control.markAsDirty({ onlySelf: true });
  control._forEachChild(function(control) {
    return control.markAllAsDirty();
  });
}
export function selectControlValue$(control, mapFn) {
  return control.value$.pipe(map(mapFn), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,
