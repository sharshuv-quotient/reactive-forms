import { defer, merge, of } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { coerceArray, isNil } from './utils';
function getControlValue(control) {
  if (control.getRawValue) {
    return control.getRawValue();
  }
  return control.value;
}
function compareErrors(a, b) {
  if (isNil(a) || isNil(b)) {
    return a === b;
  }
  return JSON.stringify(a) === JSON.stringify(b);
}
export function controlValueChanges$(control) {
  return merge(
    defer(() => of(getControlValue(control))),
    control.valueChanges.pipe(map(() => getControlValue(control)))
  );
}
export function controlDisabled$(control) {
  return merge(
    defer(() => of(control.disabled)),
    control.statusChanges.pipe(
      map(() => control.disabled),
      distinctUntilChanged()
    )
  );
}
export function controlEnabled$(control) {
  return merge(
    defer(() => of(control.enabled)),
    control.statusChanges.pipe(
      map(() => control.enabled),
      distinctUntilChanged()
    )
  );
}
export function controlStatusChanges$(control) {
  return merge(
    defer(() => of(control.status)),
    control.statusChanges.pipe(
      map(() => control.status),
      distinctUntilChanged()
    )
  );
}
export function controlErrorChanges$(control) {
  return merge(
    defer(() => of(control.errors)),
    control.valueChanges.pipe(
      map(() => control.errors),
      distinctUntilChanged((a, b) => compareErrors(a, b))
    )
  );
}
export function enableControl(control, enabled, opts) {
  if (enabled) {
    control.enable(opts);
  } else {
    control.disable(opts);
  }
}
export function disableControl(control, disabled, opts) {
  enableControl(control, !disabled, opts);
}
export function controlDisabledWhile(control, observable, opts) {
  return observable.subscribe(isDisabled => disableControl(control, isDisabled, opts));
}
export function controlEnabledWhile(control, observable, opts) {
  return observable.subscribe(isEnabled => enableControl(control, isEnabled, opts));
}
export function mergeControlValidators(control, validators) {
  control.setValidators([control.validator, ...coerceArray(validators)]);
  control.updateValueAndValidity();
}
export function validateControlOn(control, validation) {
  return validation.subscribe(maybeError => {
    control.setErrors(maybeError);
  });
}
export function hasErrorAndTouched(control, error, path) {
  const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
  return hasError && control.touched;
}
export function hasErrorAndDirty(control, error, path) {
  const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
  return hasError && control.dirty;
}
export function markAllDirty(control) {
  control.markAsDirty({ onlySelf: true });
  control._forEachChild(control => control.markAllAsDirty());
}
export function selectControlValue$(control, mapFn) {
  return control.value$.pipe(map(mapFn), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFN0MsU0FBUyxlQUFlLENBQUksT0FBMkI7SUFDckQsSUFBSyxPQUFlLENBQUMsV0FBVyxFQUFFO1FBQ2hDLE9BQVEsT0FBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3ZDO0lBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxDQUEwQixFQUFFLENBQTBCO0lBQzNFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDaEI7SUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFJLE9BQTJCO0lBQ2pFLE9BQU8sS0FBSyxDQUNWLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDekMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQy9ELENBQUM7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RCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLE9BQXFELEVBQ3JELEtBQTRCO0lBRTVCLE9BQVEsT0FBTyxDQUFDLE1BQTBCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFDdEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBkZWZlciwgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGb3JtQXJyYXkgfSBmcm9tICcuL2Zvcm1BcnJheSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJy4vZm9ybUNvbnRyb2wnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnLi9mb3JtR3JvdXAnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBDb250cm9sT3B0aW9ucywgQ29udHJvbFN0YXRlLCBWYWxpZGF0b3JGbiwgQ29udHJvbFBhdGggfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGNvZXJjZUFycmF5LCBpc05pbCB9IGZyb20gJy4vdXRpbHMnO1xuXG5mdW5jdGlvbiBnZXRDb250cm9sVmFsdWU8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+KTogVCB7XG4gIGlmICgoY29udHJvbCBhcyBhbnkpLmdldFJhd1ZhbHVlKSB7XG4gICAgcmV0dXJuIChjb250cm9sIGFzIGFueSkuZ2V0UmF3VmFsdWUoKTtcbiAgfVxuICByZXR1cm4gY29udHJvbC52YWx1ZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUVycm9ycyhhOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCwgYjogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwpIHtcbiAgaWYgKGlzTmlsKGEpIHx8IGlzTmlsKGIpKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGEpID09PSBKU09OLnN0cmluZ2lmeShiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xWYWx1ZUNoYW5nZXMkPFQ+KGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPik6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gbWVyZ2UoXG4gICAgZGVmZXIoKCkgPT4gb2YoZ2V0Q29udHJvbFZhbHVlKGNvbnRyb2wpKSksXG4gICAgY29udHJvbC52YWx1ZUNoYW5nZXMucGlwZShtYXAoKCkgPT4gZ2V0Q29udHJvbFZhbHVlKGNvbnRyb2wpKSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xEaXNhYmxlZCQ8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gIHJldHVybiBtZXJnZShcbiAgICBkZWZlcigoKSA9PiBvZihjb250cm9sLmRpc2FibGVkKSksXG4gICAgY29udHJvbC5zdGF0dXNDaGFuZ2VzLnBpcGUoXG4gICAgICBtYXAoKCkgPT4gY29udHJvbC5kaXNhYmxlZCksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbEVuYWJsZWQkPFQ+KGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICByZXR1cm4gbWVyZ2UoXG4gICAgZGVmZXIoKCkgPT4gb2YoY29udHJvbC5lbmFibGVkKSksXG4gICAgY29udHJvbC5zdGF0dXNDaGFuZ2VzLnBpcGUoXG4gICAgICBtYXAoKCkgPT4gY29udHJvbC5lbmFibGVkKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250cm9sU3RhdHVzQ2hhbmdlcyQ8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+KTogT2JzZXJ2YWJsZTxDb250cm9sU3RhdGU+IHtcbiAgcmV0dXJuIG1lcmdlKFxuICAgIGRlZmVyKCgpID0+IG9mKGNvbnRyb2wuc3RhdHVzIGFzIENvbnRyb2xTdGF0ZSkpLFxuICAgIGNvbnRyb2wuc3RhdHVzQ2hhbmdlcy5waXBlKFxuICAgICAgbWFwKCgpID0+IGNvbnRyb2wuc3RhdHVzIGFzIENvbnRyb2xTdGF0ZSksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbEVycm9yQ2hhbmdlcyQ8RT4oY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogT2JzZXJ2YWJsZTxFIHwgbnVsbD4ge1xuICByZXR1cm4gbWVyZ2UoXG4gICAgZGVmZXIoKCkgPT4gb2YoY29udHJvbC5lcnJvcnMgYXMgRSkpLFxuICAgIGNvbnRyb2wudmFsdWVDaGFuZ2VzLnBpcGUoXG4gICAgICBtYXAoKCkgPT4gY29udHJvbC5lcnJvcnMgYXMgRSksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYSwgYikgPT4gY29tcGFyZUVycm9ycyhhLCBiKSlcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVDb250cm9sPFQ+KGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPiwgZW5hYmxlZDogYm9vbGVhbiwgb3B0cz86IENvbnRyb2xPcHRpb25zKTogdm9pZCB7XG4gIGlmIChlbmFibGVkKSB7XG4gICAgY29udHJvbC5lbmFibGUob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgY29udHJvbC5kaXNhYmxlKG9wdHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlQ29udHJvbDxUPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4sIGRpc2FibGVkOiBib29sZWFuLCBvcHRzPzogQ29udHJvbE9wdGlvbnMpOiB2b2lkIHtcbiAgZW5hYmxlQ29udHJvbChjb250cm9sLCAhZGlzYWJsZWQsIG9wdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbERpc2FibGVkV2hpbGU8VD4oXG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPixcbiAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgb3B0cz86IENvbnRyb2xPcHRpb25zXG4pOiBTdWJzY3JpcHRpb24ge1xuICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoaXNEaXNhYmxlZCA9PiBkaXNhYmxlQ29udHJvbChjb250cm9sLCBpc0Rpc2FibGVkLCBvcHRzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250cm9sRW5hYmxlZFdoaWxlPFQ+KFxuICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4sXG4gIG9ic2VydmFibGU6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gIG9wdHM/OiBDb250cm9sT3B0aW9uc1xuKTogU3Vic2NyaXB0aW9uIHtcbiAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKGlzRW5hYmxlZCA9PiBlbmFibGVDb250cm9sKGNvbnRyb2wsIGlzRW5hYmxlZCwgb3B0cykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDb250cm9sVmFsaWRhdG9yczxULCBDb250cm9sIGV4dGVuZHMgQWJzdHJhY3RDb250cm9sPFQ+PihcbiAgY29udHJvbDogQ29udHJvbCxcbiAgdmFsaWRhdG9yczogVmFsaWRhdG9yRm48VD4gfCBWYWxpZGF0b3JGbjxUPltdXG4pOiB2b2lkIHtcbiAgY29udHJvbC5zZXRWYWxpZGF0b3JzKFtjb250cm9sLnZhbGlkYXRvciwgLi4uY29lcmNlQXJyYXkodmFsaWRhdG9ycyldKTtcbiAgY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbnRyb2xPbjxUPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4sIHZhbGlkYXRpb246IE9ic2VydmFibGU8bnVsbCB8IG9iamVjdD4pOiBTdWJzY3JpcHRpb24ge1xuICByZXR1cm4gdmFsaWRhdGlvbi5zdWJzY3JpYmUobWF5YmVFcnJvciA9PiB7XG4gICAgY29udHJvbC5zZXRFcnJvcnMobWF5YmVFcnJvcik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzRXJyb3JBbmRUb3VjaGVkPFQ+KGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPiwgZXJyb3I6IHN0cmluZywgcGF0aD86IENvbnRyb2xQYXRoKTogYm9vbGVhbiB7XG4gIGNvbnN0IGhhc0Vycm9yID0gY29udHJvbC5oYXNFcnJvcihlcnJvciwgIXBhdGggfHwgcGF0aC5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBwYXRoKTtcbiAgcmV0dXJuIGhhc0Vycm9yICYmIGNvbnRyb2wudG91Y2hlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Vycm9yQW5kRGlydHk8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+LCBlcnJvcjogc3RyaW5nLCBwYXRoPzogQ29udHJvbFBhdGgpOiBib29sZWFuIHtcbiAgY29uc3QgaGFzRXJyb3IgPSBjb250cm9sLmhhc0Vycm9yKGVycm9yLCAhcGF0aCB8fCBwYXRoLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHBhdGgpO1xuICByZXR1cm4gaGFzRXJyb3IgJiYgY29udHJvbC5kaXJ0eTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtBbGxEaXJ0eTxUPihjb250cm9sOiBGb3JtQXJyYXk8VD4gfCBGb3JtR3JvdXA8VD4pOiB2b2lkIHtcbiAgY29udHJvbC5tYXJrQXNEaXJ0eSh7IG9ubHlTZWxmOiB0cnVlIH0pO1xuICAoY29udHJvbCBhcyBhbnkpLl9mb3JFYWNoQ2hpbGQoY29udHJvbCA9PiBjb250cm9sLm1hcmtBbGxBc0RpcnR5KCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0Q29udHJvbFZhbHVlJDxULCBSPihcbiAgY29udHJvbDogRm9ybUdyb3VwPFQ+IHwgRm9ybUFycmF5PFQ+IHwgRm9ybUNvbnRyb2w8VD4sXG4gIG1hcEZuOiAoc3RhdGU6IFQgfCBUW10pID0+IFJcbik6IE9ic2VydmFibGU8Uj4ge1xuICByZXR1cm4gKGNvbnRyb2wudmFsdWUkIGFzIE9ic2VydmFibGU8YW55PikucGlwZShtYXAobWFwRm4pLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbn1cbiJdfQ==
