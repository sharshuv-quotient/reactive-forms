import { FormGroup as NgFormGroup } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import {
  controlDisabled$,
  controlDisabledWhile,
  controlEnabled$,
  controlEnabledWhile,
  controlErrorChanges$,
  controlStatusChanges$,
  controlValueChanges$,
  disableControl,
  enableControl,
  hasErrorAndDirty,
  hasErrorAndTouched,
  markAllDirty,
  mergeControlValidators,
  selectControlValue$,
  validateControlOn
} from './control-actions';
import { coerceArray } from './utils';
export class FormGroup extends NgFormGroup {
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(controls, validatorOrOpts, asyncValidator);
    this.controls = controls;
    this.touchChanges = new Subject();
    this.dirtyChanges = new Subject();
    this.touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());
    this.dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());
    this.value$ = controlValueChanges$(this);
    this.disabled$ = controlDisabled$(this);
    this.enabled$ = controlEnabled$(this);
    this.status$ = controlStatusChanges$(this);
    this.errors$ = controlErrorChanges$(this);
  }
  select(mapFn) {
    return selectControlValue$(this, mapFn);
  }
  getRawValue() {
    return super.getRawValue();
  }
  get(path) {
    return super.get(path);
  }
  getControl(...names) {
    return this.get(names);
  }
  addControl(name, control) {
    super.addControl(name, control);
  }
  removeControl(name) {
    super.removeControl(name);
  }
  contains(controlName) {
    return super.contains(controlName);
  }
  setControl(name, control) {
    super.setControl(name, control);
  }
  setValue(valueOrObservable, options) {
    if (isObservable(valueOrObservable)) {
      return valueOrObservable.subscribe(value => super.setValue(value, options));
    }
    super.setValue(valueOrObservable, options);
  }
  patchValue(valueOrObservable, options) {
    if (isObservable(valueOrObservable)) {
      return valueOrObservable.subscribe(value => super.patchValue(value, options));
    }
    super.patchValue(valueOrObservable, options);
  }
  disabledWhile(observable, options) {
    return controlDisabledWhile(this, observable, options);
  }
  enabledWhile(observable, options) {
    return controlEnabledWhile(this, observable, options);
  }
  mergeValidators(validators) {
    mergeControlValidators(this, validators);
  }
  mergeAsyncValidators(validators) {
    this.setAsyncValidators([this.asyncValidator, ...coerceArray(validators)]);
    this.updateValueAndValidity();
  }
  markAsTouched(opts) {
    super.markAsTouched(opts);
    this.touchChanges.next(true);
  }
  markAsUntouched(opts) {
    super.markAsUntouched(opts);
    this.touchChanges.next(false);
  }
  markAsPristine(opts) {
    super.markAsPristine(opts);
    this.dirtyChanges.next(false);
  }
  markAsDirty(opts) {
    super.markAsDirty(opts);
    this.dirtyChanges.next(true);
  }
  markAllAsDirty() {
    markAllDirty(this);
  }
  reset(formState, options) {
    super.reset(formState, options);
  }
  setValidators(newValidator) {
    super.setValidators(newValidator);
    super.updateValueAndValidity();
  }
  setAsyncValidators(newValidator) {
    super.setAsyncValidators(newValidator);
    super.updateValueAndValidity();
  }
  validateOn(observableValidation) {
    return validateControlOn(this, observableValidation);
  }
  hasError(errorCode, path) {
    return super.hasError(errorCode, path);
  }
  setErrors(errors, opts = {}) {
    return super.setErrors(errors, opts);
  }
  getError(errorCode, path) {
    return super.getError(errorCode, path);
  }
  hasErrorAndTouched(error, ...path) {
    return hasErrorAndTouched(this, error, ...path);
  }
  hasErrorAndDirty(error, ...path) {
    return hasErrorAndDirty(this, error, ...path);
  }
  setEnable(enable = true, opts) {
    enableControl(this, enable, opts);
  }
  setDisable(disable = true, opts) {
    disableControl(this, disable, opts);
  }
}
//# sourceMappingURL=data:application/json;base64,
